package com.kevin.tiertagger.model;

import com.google.gson.internal.LinkedTreeMap;
import com.google.gson.reflect.TypeToken;
import com.kevin.tiertagger.TierTagger;
import net.minecraft.text.Text;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public record GameMode(String apiKey, String title, String info_text, String kit_image) {
    public static CompletableFuture<List<GameMode>> getGamemodes(HttpClient client) {
        String endpoint = TierTagger.getManager().getConfig().getBaseUrl() + "/tierlists";
        final HttpRequest request = HttpRequest.newBuilder(URI.create(endpoint)).GET().build();

        return client.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(HttpResponse::body)
                .thenApply(s ->
                        TierTagger.GSON.fromJson(s, new TypeToken<LinkedTreeMap<String, PartialGamemode>>() {})
                                .entrySet()
                                .stream()
                                .map(e -> {
                                    PartialGamemode g = e.getValue();
                                    return new GameMode(e.getKey(), g.title, g.info_text, g.kit_image);
                                })
                                .toList()
                )
                .whenComplete((i, t) -> {
                    if (t != null) TierTagger.getLogger().warn("Error fetching tier list", t);
                });
    }

    public Text render() {
        return KnownGamemode.byKey(this.apiKey)
                .map(KnownGamemode::formatted)
                .orElse(Text.literal(this.title));
    }

    public Text icon() {
        return KnownGamemode.byKey(this.apiKey)
                .map(g -> Text.literal(g.getIcon()).styled(s -> s.withColor(g.getIconColor())))
                .orElse(Text.empty());
    }

    public Optional<GameMode> next(List<GameMode> gamemodes) {
        int index = gamemodes.indexOf(this);

        if (index < 0) {
            return Optional.empty();
        } else {
            int nextIndex = (index + 1) % gamemodes.size();
            return Optional.of(gamemodes.get(nextIndex));
        }
    }

    public static Optional<GameMode> find(String key) {
        return TierTagger.getGameModes().stream().filter(g -> g.apiKey.equalsIgnoreCase(key)).findFirst();
    }

    public static GameMode fromKnown(KnownGamemode known) {
        return new GameMode(known.getApiKey(), known.getTranslationKey(), "Generated by TierTagger.", "");
    }

    private record PartialGamemode(String title, String info_text, String kit_image) {}
}
